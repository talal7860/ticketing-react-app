// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormInput should render a FormGroup tag when this input is rendered  provided 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FormInput
    id="id"
    label="label"
    name="yo"
    onChange={[Function]}
    placeholder="placeholder"
    type="type"
    value=""
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Label
          for="id"
          tag="label"
          widths={
                    Array [
                              "xs",
                              "sm",
                              "md",
                              "lg",
                              "xl",
                            ]
          }
>
          label
</Label>,
        <Input
          id="id"
          name="yo"
          onChange={[Function]}
          placeholder="placeholder"
          tag="p"
          type="type"
          value=""
/>,
      ],
      "tag": "div",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "label",
          "for": "id",
          "tag": "label",
          "widths": Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ],
        },
        "ref": null,
        "rendered": "label",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "id": "id",
          "name": "yo",
          "onChange": [Function],
          "placeholder": "placeholder",
          "tag": "p",
          "type": "type",
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Label
            for="id"
            tag="label"
            widths={
                        Array [
                                    "xs",
                                    "sm",
                                    "md",
                                    "lg",
                                    "xl",
                                  ]
            }
>
            label
</Label>,
          <Input
            id="id"
            name="yo"
            onChange={[Function]}
            placeholder="placeholder"
            tag="p"
            type="type"
            value=""
/>,
        ],
        "tag": "div",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "label",
            "for": "id",
            "tag": "label",
            "widths": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
          },
          "ref": null,
          "rendered": "label",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": "id",
            "name": "yo",
            "onChange": [Function],
            "placeholder": "placeholder",
            "tag": "p",
            "type": "type",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
